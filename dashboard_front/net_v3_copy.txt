// Copyright 2010 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"html/template"
	"io/ioutil"
	"log"
	"net/http"
	"regexp"
    
)

type Page struct {
	Title string
	Body  []byte
}

func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename, p.Body, 0600)
}

func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound)
		return
	}
	renderTemplate(w, "view", p)
}

func editHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}
	renderTemplate(w, "edit", p)
}

func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)}
	err := p.save()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}


func getJsonDataBanwire(w http.ResponseWriter, r *http.Request) {
    /// START
  //var uno string
  //uno="[[1,11],[2,6],[3,8],[4,5],[5,4],[6,6],[7,7],[8,6],[9,9],[10,12],[11,14],[12,14],[13,16],[14,12],[15,9],[16,6],[17,5],[18,6],[19,8],[20,10],[21,11],[22,11],[23,15],[24,16],[25,13],[26,9],[27,4],[28,2],[29,-1],[30,4],[31,2],[32,5],[33,0],[34,-5],[35,0],[36,0],[37,2],[38,3],[39,8],[40,8],[41,6],[42,7],[43,12],[44,17],[45,20],[46,16],[47,13],[48,10],[49,13],[50,17],[51,21],[52,19],[53,18],[54,21],[55,26],[56,28],[57,33],[58,28],[59,33],[60,29],[61,24],[62,21],[63,26],[64,21],[65,18],[66,23],[67,24],[68,29],[69,29],[70,29],[71,28],[72,32],[73,28],[74,27],[75,31],[76,35],[77,36],[78,31],[79,26],[80,24],[81,29],[82,33],[83,35],[84,34],[85,36],[86,38],[87,33],[88,34],[89,36],[90,31],[91,34],[92,37],[93,35],[94,37],[95,40],[96,41],[97,42],[98,41],[99,42],[100,38]]"
	w.Header().Set("Content-Type", "application/json")
//	w.Write( []byte("Hello") )
    w.Write( []byte("[[1,11],[2,6],[3,8],[4,5],[5,4],[6,6],[7,7],[8,6],[9,9],[10,12],[11,14],[12,14],[13,16],[14,12],[15,9],[16,6],[17,5],[18,6],[19,8],[20,10],[21,11],[22,11],[23,15],[24,16],[25,13],[26,9],[27,4],[28,2],[29,-1],[30,4] ]") )
   
}

var templates = template.Must(template.ParseFiles("edit.html", "view.html"))

func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

var validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")

func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		m := validPath.FindStringSubmatch(r.URL.Path)
		if m == nil {
			http.NotFound(w, r)
			return
		}
		fn(w, r, m[2])
	}
}

func main() {
	http.HandleFunc("/view/", makeHandler(viewHandler))
	http.HandleFunc("/edit/", makeHandler(editHandler))
	http.HandleFunc("/save/", makeHandler(saveHandler))
    http.HandleFunc("/getjsondatabanwire/", getJsonDataBanwire)

    http.HandleFunc("/ejemplo/", ejemploHandler)
    http.HandleFunc("/font-roboto.css", serveCss01)
   http.HandleFunc("/bootstrap4-alpha3.min.css", serveCss02)
    http.HandleFunc("/font-awesome.min.css", serveCss03)
     http.HandleFunc("/style.css", serveCss04)
     
     http.HandleFunc("/jquery-3.1.0.min.js", serveJs01)
     http.HandleFunc("/tether.min.js", serveJs02)
     http.HandleFunc("/bootstrap4-alpha3.min.js", serveJs03)
     http.HandleFunc("/canvasjs.min.js", serveJs04)
     http.HandleFunc("/real-time.js", serveJs05)

	log.Fatal(http.ListenAndServe(":8080", nil))
}


func serveCss01(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/font-roboto.css")
}


func serveCss02(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/bootstrap4-alpha3.min.css")
}

func serveCss03(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/font-awesome.min.css")
}

func serveCss04(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/style.css")
}

func serveJs01(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/jquery-3.1.0.min.js")
}
func serveJs02(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/tether.min.js")
}
func serveJs03(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/bootstrap4-alpha3.min.js")
}
func serveJs04(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/canvasjs.min.js")
}

func serveJs05(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "css/real-time.js")
}

func ejemploHandler(w http.ResponseWriter, r *http.Request) {
    title := r.URL.Path[len("/ejemplo/"):]
    p, _ := loadPage(title)
    t, _ := template.ParseFiles("ejemplo.html")
    t.Execute(w, p)
}